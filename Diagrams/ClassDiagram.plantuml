@startuml CPU Simulator

Boostrapper o-- CPU
Boostrapper *-- Clock
Boostrapper *-left- Translator

Clock *-left- ScheduledExecutorService

CPU *-- DeferredUpdateComponent
CPU *-- InstructionFetch
CPU *-- InstructionDecode
CPU *-right- ExecutionUnit
CPU *-- Memory
CPU *-left- Clock
CPU *-- Register

Register .up.|> DeferredUpdateComponent

ExecutionUnit *-up- AluResult

InstructionDecode *-left- ControlSignals 

DeferredUpdateComponent <|.. InstructionDecode
DeferredUpdateComponent <|.right. InstructionFetch
DeferredUpdateComponent <|.left. Memory


class AluResult{
    + res : int
    + zero : boolean
}

class ControlSignals {
    + jump : bool
    + memToReg : bool
    + regWrite : bool
    + memWrite : bool
    + branch : bool
    + aluSrc : bool
    + regDst : bool
    + aluOp : byte
}

interface DeferredUpdateComponent {
    {abstract} + commitChanges()
}

class Boostrapper {
    + main(args: String[]) : void
}

class CPU {
    - synchronousComponents : List<SynchronousComponent>
    - view : IView
    - instructionFetch : InstructionFetch
    - instructionDecode : InstructionDecode
    - executionUnit : ExecutionUnit
    - memory : Memory
    - ifId : Register
    - idEx : Register 
    - exMem : Register
    - memWb : Register
    + CPU(clock: Clock, view: IView)
    + reset()
    + loadInstructionSet(instructions: List<Integer>)
    - executePipeline()
    - updateView()
    - initRegisters()
}

class Clock {
    - value : boolean
    - clockCycleDuration : int
    - isAutoTickEnabled : boolean
    - scheduler : ScheduledExecutorService
    - onClockTick : List<Runnable>
    + addAsynchronousTask(callback: Runnable) : void
    + startAutoTick() : void
    + stopAutoTick() : void
    + tickOnce() : void
}

class InstructionFetch {
    - instructionMemotyCapacity : int = 64
    - instructionMemory : int[instructionMemoryCapacity]
    - programCounter : int
    + getCurrentInstruction(): int
    + incrementPC(): void
    + jumpToAddress(addr: int): void
}

class InstructionDecode {
    - registerFile : int[32]
    + readData(addr2: int) : int
    + writeData(addr: short, data: int): void
    + getControlSignals(instruction: int): ControlSignals
    + extendOp(op: int, withSign: bool): int
}

class ExecutionUnit {
    + executeInstruction(op1: int, op2: int, shiftAmmt: int, aluOp: byte) : AluRes
    + getBranchAddress(currPCAddr: Int32, instrToJump: int) : int
}

class Memory {
    - memoryBlock : int[32]
    + getData(adr: int) : int
    + writeData(adr: int) : void
    + commitChanges() : void
}

class Register {
    - fieldValues : Map<String, Object>
    - pendingValues : Map<String, Object>
    + addField<T>(fieldName: String, defaultValue: T) : void
    + setValue<T>(fieldName: String, value: T) : void
    + getValue<T>(fieldName: String, value: T) : T
    + commitChanges() : void
}


class Translator {
    - static Map<String, Integer> instructionOpCodes
    - static Map<String, Integer> instructionFunc
    - static Pattern jumpAddrPattern
    - static Pattern registerOperandPattern

    + static List<Integer> translateInstructionSet(List<String> instructionSet) throws TranslationError
    - static int translateInstruction(String instruction) throws TranslationError
    - static int parseJ(String instruction, int opCode, String instrBody) throws TranslationError
    - static int parseRType(String instructionId, int opCode, String instrBody) throws TranslationError
    - static int parse2R1I(String instructionId, int opCode, String body) throws TranslationError
}

@enduml