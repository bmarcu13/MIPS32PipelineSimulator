@startuml CPU Simulator

Boostrapper o-- CPU
Boostrapper *-- Clock
Boostrapper *-right- MainView
Boostrapper *-left- Compiler

Clock *-- ClockTransition
Clock *-left- ScheduledExecutorService

CPU *-- SynchrounousComponent
CPU *-- InstructionFetch
CPU *-- InstructionDecode
CPU *-right- ExecutionUnit
CPU *-- Memory
CPU *-left- Clock
CPU *-- StageRegister

StageRegister .up.|> SynchrounousComponent

ExecutionUnit *-up- AluResult

InstructionDecode *-- ControlSignals 

SynchrounousComponent <|.. InstructionDecode
SynchrounousComponent <|.right. InstructionFetch
SynchrounousComponent <|.left. Memory



enum ClockTransition{
    RISING_EDGE
    FALLING_EDGE
}

class AluResult{
    + res : Int32
    + zero : Boolean
}

class ControlSignals {

}

interface SynchrounousComponent {
    + executeOnRisingEdge()
    + executeOnFallingEdge()
}

class Boostrapper {
    - cpu : CPU
    - clock : Clock
    - mainView : MainView
}

class CPU {
    - synchronousComponents : List<SynchrounousComponent>
    - clock : Clock
    + reset()
}

class Clock {
    - value : Boolean
    - clockTransition : ClockTransition
    - clockCycleDuration : Integer
    - isAutoTickEnabled : AtomicBoolean
    - scheduler : ScheduledExecutorService
    - onRisingEdge : Runnable
    - onFallingEdge : Runnable
    - tick() : void
    + setOnRisingEdge(callback: Runnable) : void
    + setOnFallingEdge(callback: Runnable) : void
    + startAutoTick() : void
    + stopAutoTick() : void
    + TickOnce() : void
}

class Memory {
    - memoryBlock : Vector<Int32>
}

class InstructionFetch {
    - instructionMemory : Vector<Int32>
    - programCounter : Int32
    + getInstruction(adr: Int32): Int32
    + incrementPC(): void
    + jumpToAddress(adr: Int32): void;
}

class InstructionDecode {
    - registerFile : Vector<Int32>
    + readData1(addr1: Int8) : Int32
    + readData2(addr2: Int8) : Int32
    + writeData(writeAddr: Int8, data: Int32): void
    + getControlSignals(instruction: Int32): ControlSignals
    + extendOp(op: Int16): Int32
}

class ExecutionUnit {
    - getAluControlSignals(TBD: aluOP) : TBD
    + executeInstruction(opA: Int32, opB: Int32, aluOP: TBD) : AluRes
    + getBranchAddress(currPCAddr: Int32, instrToJump: Int32) : Int32
}

class Memory {
    + getData(adr: Int32): Int32
    + writeData(adr: Int32): void
}

class StageRegister {
    - fields : Map<Pair<String, Class>, Number>
    + addField(fieldName: String, fieldType: Class)
    + setFieldValue(fieldName: String, value: Number) : void
    + getFieldValue(fieldName: String) : Number
    + executeOnRisignEdge()
    + executeOnFallingEdge()
}

class MainView {

}

class Compiler {
    - registerSet : Map<String, Int>
    + compile(program: String) : List<Int32>
}

@enduml